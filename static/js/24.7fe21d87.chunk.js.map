{"version":3,"sources":["../node_modules/_codemirror@5.60.0@codemirror/mode/wast/wast.js","../node_modules/_codemirror@5.60.0@codemirror/addon/mode/simple.js"],"names":["CodeMirror","defineSimpleMode","start","regex","token","RegExp","join","next","indent","dedent","comment","meta","dontIndentStates","defineMIME","mod","__webpack_require__","ensureState","states","name","hasOwnProperty","Error","toRegex","val","caret","flags","ignoreCase","source","String","Rule","data","push","this","apply","replace","result","i","length","asToken","tokenFunction","config","stream","state","pending","pend","shift","pos","text","local","end","match","tok","endToken","localState","m","mode","endScan","exec","current","index","curState","rule","matches","sol","stack","pop","enterLocalMode","indentation","indentUnit","j","backUp","cmp","a","b","props","prop","spec","pers","persistent","p","persistentStates","getMode","lState","startState","forceEnd","indentFunction","textAfter","line","arr","indexOf","Pass","rules","scan","dedentIfLineStart","slice","defineMode","simpleMode","states_","hasIndentation","list","orig","copyState","s","innerMode"],"mappings":"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","file":"static/js/24.7fe21d87.chunk.js","sourcesContent":["// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"), require(\"../../addon/mode/simple\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\", \"../../addon/mode/simple\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  var kKeywords = [\"align\", \"block\", \"br(_if|_table|_on_(cast|data|func|i31|null))?\", \"call(_indirect|_ref)?\", \"current_memory\", \"\\\\bdata\\\\b\", \"drop\", \"elem\", \"else\", \"end\", \"export\", \"\\\\bextern\\\\b\", \"\\\\bfunc\\\\b\", \"global(\\\\.(get|set))?\", \"if\", \"import\", \"local(\\\\.(get|set|tee))?\", \"loop\", \"module\", \"mut\", \"nop\", \"offset\", \"param\", \"result\", \"return(_call(_indirect|_ref)?)?\", \"select\", \"start\", \"table(\\\\.(size|get|set|size|grow|fill|init|copy))?\", \"then\", \"type\", \"unreachable\", // Numeric opcodes.\n  \"i(32|64)\\\\.(store(8|16)|(load(8|16)_[su]))\", \"i64\\\\.(load32_[su]|store32)\", \"[fi](32|64)\\\\.(const|load|store)\", \"f(32|64)\\\\.(abs|add|ceil|copysign|div|eq|floor|[gl][et]|max|min|mul|nearest|neg?|sqrt|sub|trunc)\", \"i(32|64)\\\\.(a[dn]d|c[lt]z|(div|rem)_[su]|eqz?|[gl][te]_[su]|mul|ne|popcnt|rot[lr]|sh(l|r_[su])|sub|x?or)\", \"i64\\\\.extend_[su]_i32\", \"i32\\\\.wrap_i64\", \"i(32|64)\\\\.trunc_f(32|64)_[su]\", \"f(32|64)\\\\.convert_i(32|64)_[su]\", \"f64\\\\.promote_f32\", \"f32\\\\.demote_f64\", \"f32\\\\.reinterpret_i32\", \"i32\\\\.reinterpret_f32\", \"f64\\\\.reinterpret_i64\", \"i64\\\\.reinterpret_f64\", // Atomics.\n  \"memory(\\\\.((atomic\\\\.(notify|wait(32|64)))|grow|size))?\", \"i64\\.atomic\\\\.(load32_u|store32|rmw32\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u)\", \"i(32|64)\\\\.atomic\\\\.(load((8|16)_u)?|store(8|16)?|rmw(\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)|(8|16)\\\\.(a[dn]d|sub|x?or|(cmp)?xchg)_u))\", // SIMD.\n  \"v128\\\\.load(8x8|16x4|32x2)_[su]\", \"v128\\\\.load(8|16|32|64)_splat\", \"v128\\\\.(load|store)(8|16|32|64)_lane\", \"v128\\\\.load(32|64)_zero\", \"v128\\.(load|store|const|not|andnot|and|or|xor|bitselect|any_true)\", \"i(8x16|16x8)\\\\.(extract_lane_[su]|(add|sub)_sat_[su]|avgr_u)\", \"i(8x16|16x8|32x4|64x2)\\\\.(neg|add|sub|abs|shl|shr_[su]|all_true|bitmask|eq|ne|[lg][te]_s)\", \"(i(8x16|16x8|32x4|64x2)|f(32x4|64x2))\\.(splat|replace_lane)\", \"i(8x16|16x8|32x4)\\\\.(([lg][te]_u)|((min|max)_[su]))\", \"f(32x4|64x2)\\\\.(neg|add|sub|abs|nearest|eq|ne|[lg][te]|sqrt|mul|div|min|max|ceil|floor|trunc)\", \"[fi](32x4|64x2)\\\\.extract_lane\", \"i8x16\\\\.(shuffle|swizzle|popcnt|narrow_i16x8_[su])\", \"i16x8\\\\.(narrow_i32x4_[su]|mul|extadd_pairwise_i8x16_[su]|q15mulr_sat_s)\", \"i16x8\\\\.(extend|extmul)_(low|high)_i8x16_[su]\", \"i32x4\\\\.(mul|dot_i16x8_s|trunc_sat_f64x2_[su]_zero)\", \"i32x4\\\\.((extend|extmul)_(low|high)_i16x8_|trunc_sat_f32x4_|extadd_pairwise_i16x8_)[su]\", \"i64x2\\\\.(mul|(extend|extmul)_(low|high)_i32x4_[su])\", \"f32x4\\\\.(convert_i32x4_[su]|demote_f64x2_zero)\", \"f64x2\\\\.(promote_low_f32x4|convert_low_i32x4_[su])\", // Reference types, function references, and GC.\n  \"\\\\bany\\\\b\", \"array\\\\.len\", \"(array|struct)(\\\\.(new_(default_)?with_rtt|get(_[su])?|set))?\", \"\\\\beq\\\\b\", \"field\", \"i31\\\\.(new|get_[su])\", \"\\\\bnull\\\\b\", \"ref(\\\\.(([ai]s_(data|func|i31))|cast|eq|func|(is_|as_non_)?null|test))?\", \"rtt(\\\\.(canon|sub))?\"];\n  CodeMirror.defineSimpleMode('wast', {\n    start: [{\n      regex: /[+\\-]?(?:nan(?::0x[0-9a-fA-F]+)?|infinity|inf|0x[0-9a-fA-F]+\\.?[0-9a-fA-F]*p[+\\/-]?\\d+|\\d+(?:\\.\\d*)?[eE][+\\-]?\\d*|\\d+\\.\\d*|0x[0-9a-fA-F]+|\\d+)/,\n      token: \"number\"\n    }, {\n      regex: new RegExp(kKeywords.join('|')),\n      token: \"keyword\"\n    }, {\n      regex: /\\b((any|data|eq|extern|i31|func)ref|[fi](32|64)|i(8|16))\\b/,\n      token: \"atom\"\n    }, {\n      regex: /\\$([a-zA-Z0-9_`\\+\\-\\*\\/\\\\\\^~=<>!\\?@#$%&|:\\.]+)/,\n      token: \"variable-2\"\n    }, {\n      regex: /\"(?:[^\"\\\\\\x00-\\x1f\\x7f]|\\\\[nt\\\\'\"]|\\\\[0-9a-fA-F][0-9a-fA-F])*\"/,\n      token: \"string\"\n    }, {\n      regex: /\\(;.*?/,\n      token: \"comment\",\n      next: \"comment\"\n    }, {\n      regex: /;;.*$/,\n      token: \"comment\"\n    }, {\n      regex: /\\(/,\n      indent: true\n    }, {\n      regex: /\\)/,\n      dedent: true\n    }],\n    comment: [{\n      regex: /.*?;\\)/,\n      token: \"comment\",\n      next: \"start\"\n    }, {\n      regex: /.*/,\n      token: \"comment\"\n    }],\n    meta: {\n      dontIndentStates: ['comment']\n    }\n  }); // https://github.com/WebAssembly/design/issues/981 mentions text/webassembly,\n  // which seems like a reasonable choice, although it's not standard right now.\n\n  CodeMirror.defineMIME(\"text/webassembly\", \"wast\");\n});","// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.defineSimpleMode = function (name, states) {\n    CodeMirror.defineMode(name, function (config) {\n      return CodeMirror.simpleMode(config, states);\n    });\n  };\n\n  CodeMirror.simpleMode = function (config, states) {\n    ensureState(states, \"start\");\n    var states_ = {},\n        meta = states.meta || {},\n        hasIndentation = false;\n\n    for (var state in states) {\n      if (state != meta && states.hasOwnProperty(state)) {\n        var list = states_[state] = [],\n            orig = states[state];\n\n        for (var i = 0; i < orig.length; i++) {\n          var data = orig[i];\n          list.push(new Rule(data, states));\n          if (data.indent || data.dedent) hasIndentation = true;\n        }\n      }\n    }\n\n    var mode = {\n      startState: function startState() {\n        return {\n          state: \"start\",\n          pending: null,\n          local: null,\n          localState: null,\n          indent: hasIndentation ? [] : null\n        };\n      },\n      copyState: function copyState(state) {\n        var s = {\n          state: state.state,\n          pending: state.pending,\n          local: state.local,\n          localState: null,\n          indent: state.indent && state.indent.slice(0)\n        };\n        if (state.localState) s.localState = CodeMirror.copyState(state.local.mode, state.localState);\n        if (state.stack) s.stack = state.stack.slice(0);\n\n        for (var pers = state.persistentStates; pers; pers = pers.next) {\n          s.persistentStates = {\n            mode: pers.mode,\n            spec: pers.spec,\n            state: pers.state == state.localState ? s.localState : CodeMirror.copyState(pers.mode, pers.state),\n            next: s.persistentStates\n          };\n        }\n\n        return s;\n      },\n      token: tokenFunction(states_, config),\n      innerMode: function innerMode(state) {\n        return state.local && {\n          mode: state.local.mode,\n          state: state.localState\n        };\n      },\n      indent: indentFunction(states_, meta)\n    };\n    if (meta) for (var prop in meta) {\n      if (meta.hasOwnProperty(prop)) mode[prop] = meta[prop];\n    }\n    return mode;\n  };\n\n  function ensureState(states, name) {\n    if (!states.hasOwnProperty(name)) throw new Error(\"Undefined state \" + name + \" in simple mode\");\n  }\n\n  function toRegex(val, caret) {\n    if (!val) return /(?:)/;\n    var flags = \"\";\n\n    if (val instanceof RegExp) {\n      if (val.ignoreCase) flags = \"i\";\n      val = val.source;\n    } else {\n      val = String(val);\n    }\n\n    return new RegExp((caret === false ? \"\" : \"^\") + \"(?:\" + val + \")\", flags);\n  }\n\n  function asToken(val) {\n    if (!val) return null;\n    if (val.apply) return val;\n    if (typeof val == \"string\") return val.replace(/\\./g, \" \");\n    var result = [];\n\n    for (var i = 0; i < val.length; i++) {\n      result.push(val[i] && val[i].replace(/\\./g, \" \"));\n    }\n\n    return result;\n  }\n\n  function Rule(data, states) {\n    if (data.next || data.push) ensureState(states, data.next || data.push);\n    this.regex = toRegex(data.regex);\n    this.token = asToken(data.token);\n    this.data = data;\n  }\n\n  function tokenFunction(states, config) {\n    return function (stream, state) {\n      if (state.pending) {\n        var pend = state.pending.shift();\n        if (state.pending.length == 0) state.pending = null;\n        stream.pos += pend.text.length;\n        return pend.token;\n      }\n\n      if (state.local) {\n        if (state.local.end && stream.match(state.local.end)) {\n          var tok = state.local.endToken || null;\n          state.local = state.localState = null;\n          return tok;\n        } else {\n          var tok = state.local.mode.token(stream, state.localState),\n              m;\n          if (state.local.endScan && (m = state.local.endScan.exec(stream.current()))) stream.pos = stream.start + m.index;\n          return tok;\n        }\n      }\n\n      var curState = states[state.state];\n\n      for (var i = 0; i < curState.length; i++) {\n        var rule = curState[i];\n        var matches = (!rule.data.sol || stream.sol()) && stream.match(rule.regex);\n\n        if (matches) {\n          if (rule.data.next) {\n            state.state = rule.data.next;\n          } else if (rule.data.push) {\n            (state.stack || (state.stack = [])).push(state.state);\n            state.state = rule.data.push;\n          } else if (rule.data.pop && state.stack && state.stack.length) {\n            state.state = state.stack.pop();\n          }\n\n          if (rule.data.mode) enterLocalMode(config, state, rule.data.mode, rule.token);\n          if (rule.data.indent) state.indent.push(stream.indentation() + config.indentUnit);\n          if (rule.data.dedent) state.indent.pop();\n          var token = rule.token;\n          if (token && token.apply) token = token(matches);\n\n          if (matches.length > 2 && rule.token && typeof rule.token != \"string\") {\n            for (var j = 2; j < matches.length; j++) {\n              if (matches[j]) (state.pending || (state.pending = [])).push({\n                text: matches[j],\n                token: rule.token[j - 1]\n              });\n            }\n\n            stream.backUp(matches[0].length - (matches[1] ? matches[1].length : 0));\n            return token[0];\n          } else if (token && token.join) {\n            return token[0];\n          } else {\n            return token;\n          }\n        }\n      }\n\n      stream.next();\n      return null;\n    };\n  }\n\n  function cmp(a, b) {\n    if (a === b) return true;\n    if (!a || typeof a != \"object\" || !b || typeof b != \"object\") return false;\n    var props = 0;\n\n    for (var prop in a) {\n      if (a.hasOwnProperty(prop)) {\n        if (!b.hasOwnProperty(prop) || !cmp(a[prop], b[prop])) return false;\n        props++;\n      }\n    }\n\n    for (var prop in b) {\n      if (b.hasOwnProperty(prop)) props--;\n    }\n\n    return props == 0;\n  }\n\n  function enterLocalMode(config, state, spec, token) {\n    var pers;\n    if (spec.persistent) for (var p = state.persistentStates; p && !pers; p = p.next) {\n      if (spec.spec ? cmp(spec.spec, p.spec) : spec.mode == p.mode) pers = p;\n    }\n    var mode = pers ? pers.mode : spec.mode || CodeMirror.getMode(config, spec.spec);\n    var lState = pers ? pers.state : CodeMirror.startState(mode);\n    if (spec.persistent && !pers) state.persistentStates = {\n      mode: mode,\n      spec: spec.spec,\n      state: lState,\n      next: state.persistentStates\n    };\n    state.localState = lState;\n    state.local = {\n      mode: mode,\n      end: spec.end && toRegex(spec.end),\n      endScan: spec.end && spec.forceEnd !== false && toRegex(spec.end, false),\n      endToken: token && token.join ? token[token.length - 1] : token\n    };\n  }\n\n  function indexOf(val, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] === val) return true;\n    }\n  }\n\n  function indentFunction(states, meta) {\n    return function (state, textAfter, line) {\n      if (state.local && state.local.mode.indent) return state.local.mode.indent(state.localState, textAfter, line);\n      if (state.indent == null || state.local || meta.dontIndentStates && indexOf(state.state, meta.dontIndentStates) > -1) return CodeMirror.Pass;\n      var pos = state.indent.length - 1,\n          rules = states[state.state];\n\n      scan: for (;;) {\n        for (var i = 0; i < rules.length; i++) {\n          var rule = rules[i];\n\n          if (rule.data.dedent && rule.data.dedentIfLineStart !== false) {\n            var m = rule.regex.exec(textAfter);\n\n            if (m && m[0]) {\n              pos--;\n              if (rule.next || rule.push) rules = states[rule.next || rule.push];\n              textAfter = textAfter.slice(m[0].length);\n              continue scan;\n            }\n          }\n        }\n\n        break;\n      }\n\n      return pos < 0 ? 0 : state.indent[pos];\n    };\n  }\n});"],"sourceRoot":""}